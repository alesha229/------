import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta

from config import config
from models import Base, User, Subscription
from handlers import admin, subscription, referral
from utils.logger import logger
from utils.metrics import metrics
from prometheus_client import start_http_server
from database import engine, async_session_maker, DatabaseMiddleware
from keyboards.main import get_main_keyboard, get_search_keyboard
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from parsers.autodoc_factory import AutodocParserFactory
from parsers.search_aggregator import SearchAggregator
from parsers.autodoc_car_parser import AutodocCarParser

def create_regions_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏"""
    regions = ["General", "America", "Europe", "Japan"]
    
    keyboard = []
    current_row = []
    
    for region in regions:
        if len(current_row) == 2:
            keyboard.append(current_row)
            current_row = []
        
        current_row.append(
            InlineKeyboardButton(
                text=region,
                callback_data=f"region_{region}"
            )
        )
    
    if current_row:
        keyboard.append(current_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
parser_factory = AutodocParserFactory()
search_aggregator = SearchAggregator()

class SearchStates(StatesGroup):
    waiting_for_part_number = State()
    waiting_for_region = State()
    viewing_modifications = State()

class CarSearch(StatesGroup):
    manufacturer = State()
    modifications = State()
    model = State()
    region = State()

async def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(admin.router)
    dp.include_router(subscription.router)
    dp.include_router(referral.router)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    metrics.user_commands.labels(command="start").inc()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User)
            .options(selectinload(User.subscription))
            .where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                registered_at=datetime.utcnow()
            )
            session.add(user)
            await session.commit()
            
            logger.info(
                "new_user_registered",
                telegram_id=user.telegram_id,
                username=user.username
            )
            metrics.new_users.inc()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "üîç –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏, –∏ —è –Ω–∞–π–¥—É –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            welcome_text,
            reply_markup=get_main_keyboard()
        )
        
        logger.info(
            "start_command_processed",
            telegram_id=user.telegram_id,
            has_subscription=bool(user.subscription)
        )
        
    except Exception as e:
        logger.error(
            "start_command_error",
            error=str(e),
            telegram_id=message.from_user.id
        )
        metrics.error_count.labels(type="start_command").inc()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
async def search_parts(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
    try:
        await state.set_state(SearchStates.waiting_for_part_number)
        await message.answer(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:\n\n"
            "1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –¥–µ—Ç–∞–ª–∏:\n"
            "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: 04465-42160\n\n"
            "2Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ VIN-–Ω–æ–º–µ—Ä—É:\n"
            "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: JF1BL5KS57G03135T\n\n"
            "3Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é:\n"
            "   ‚Ä¢ –§–æ—Ä–º–∞—Ç: –ú–ê–†–ö–ê –ú–û–î–ï–õ–¨ –ì–û–î\n"
            "   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: HONDA CIVIC 1996\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –ª—é–±–æ–º –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        logger.info(
            "search_initiated",
            telegram_id=message.from_user.id
        )
        metrics.user_actions.labels(action="search_initiated").inc()
    except Exception as e:
        logger.error(
            "search_initiation_error",
            error=str(e),
            telegram_id=message.from_user.id
        )
        metrics.error_count.labels(type="search_initiation").inc()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

@dp.message(SearchStates.waiting_for_part_number)
async def handle_part_number(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–µ—Ç–∞–ª–∏"""
    try:
        query = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User)
            .options(selectinload(User.subscription))
            .where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one()
        
        if not user.subscription or not user.subscription.is_active:
            await message.answer(
                "‚ö†Ô∏è –î–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
        search_type = await parser_factory.get_search_type(query)
        
        if search_type == "car":
            # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏
            car_info = await parser_factory.extract_car_info(query)
            if car_info:
                brand, model, year = car_info
                await state.update_data(car_info={"brand": brand, "model": model, "year": year})
                await state.set_state(SearchStates.waiting_for_region)
                await message.answer(
                    f"üöó –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å:\n"
                    f"–ú–∞—Ä–∫–∞: {brand}\n"
                    f"–ú–æ–¥–µ–ª—å: {model}\n"
                    f"–ì–æ–¥: {year}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:",
                    reply_markup=create_regions_keyboard()
                )
                logger.info(
                    "car_search_success",
                    telegram_id=user.telegram_id,
                    brand=brand,
                    model=model,
                    year=year
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ú–ê–†–ö–ê –ú–û–î–ï–õ–¨ –ì–û–î\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: HONDA CIVIC 1996",
                    reply_markup=get_main_keyboard()
                )
                await state.clear()
                
        elif search_type == "vin":
            # –ü–æ–∏—Å–∫ –ø–æ VIN
            car_info = await parser_factory.extract_car_info(query)
            if car_info:
                await state.update_data(car_info=car_info)
                await state.set_state(SearchStates.waiting_for_region)
                await message.answer(
                    f"üöó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ VIN:\n"
                    f"–ú–∞—Ä–∫–∞: {car_info['brand']}\n"
                    f"–ú–æ–¥–µ–ª—å: {car_info['model']}\n"
                    f"–ì–æ–¥: {car_info['year']}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞:",
                    reply_markup=create_regions_keyboard()
                )
                logger.info(
                    "vin_search_success",
                    telegram_id=user.telegram_id,
                    vin=query
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ VIN.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_main_keyboard()
                )
                await state.clear()
                
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            await message.answer("üîç –ò—â—É –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É...")
            
            results = await search_aggregator.search_all(query)
            if results and any(results.values()):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                response = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏:\n\n"
                idx = 1
                
                for source, items in results.items():
                    if items:
                        for item in items:
                            if isinstance(item, dict) and item.get('type') != 'car_model':
                                response += f"{idx}. {item.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                response += f"üìù –ê—Ä—Ç–∏–∫—É–ª: {item.get('article', query)}\n"
                                response += f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {item.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                                
                                # –¶–µ–Ω–∞
                                price = item.get('price')
                                if price:
                                    response += f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                                else:
                                    response += "üí∞ –¶–µ–Ω–∞: –ü–æ –∑–∞–ø—Ä–æ—Å—É\n"
                                
                                # –ú–∞–≥–∞–∑–∏–Ω
                                response += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {source.upper()}\n"
                                
                                # –ù–∞–ª–∏—á–∏–µ
                                quantity = item.get('quantity')
                                if quantity and quantity > 0:
                                    response += f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {quantity} —à—Ç.\n"
                                else:
                                    response += "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
                                
                                # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
                                delivery = item.get('delivery_days')
                                if delivery:
                                    response += f"üöö –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery} –¥–Ω.\n"
                                
                                # URL –µ—Å–ª–∏ –µ—Å—Ç—å
                                if item.get('url'):
                                    response += f"üîó {item['url']}\n"
                                
                                response += "\n" + "="*30 + "\n"
                                idx += 1
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                max_length = 4096
                for i in range(0, len(response), max_length):
                    chunk = response[i:i + max_length]
                    await message.answer(chunk)
                
                logger.info(
                    "article_search_success",
                    telegram_id=user.telegram_id,
                    query=query,
                    results_count=sum(len(items) for items in results.values())
                )
                metrics.search_results.labels(type="success").inc()
            else:
                await message.answer(
                    "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–µ—Ç–∞–ª–∏.",
                    reply_markup=get_main_keyboard()
                )
                await state.clear()
                
                logger.info(
                    "search_no_results",
                    telegram_id=user.telegram_id,
                    query=query
                )
                metrics.search_results.labels(type="no_results").inc()
                
    except Exception as e:
        logger.error(
            "search_error",
            error=str(e),
            telegram_id=message.from_user.id,
            query=message.text
        )
        metrics.error_count.labels(type="search").inc()
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

def create_modifications_keyboard(modifications, page=1):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
    if not modifications:
        return types.InlineKeyboardMarkup(inline_keyboard=[])

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –∫–Ω–æ–ø–æ–∫
    items_per_page = 5
    total_pages = (len(modifications) + items_per_page - 1) // items_per_page
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    page = max(1, min(page, total_pages))
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(modifications))
    current_modifications = modifications[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    keyboard = []
    for mod in current_modifications:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        mod_text = f"{mod['grade']} ‚Ä¢ {mod['transmission']} ‚Ä¢ {mod['doors']}–¥ ‚Ä¢ {mod['dest_region']}"
        callback_data = f"mod_{mod['id']}"
        keyboard.append([types.InlineKeyboardButton(text=mod_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages > 1:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"page_{page-1}"
            ))
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        nav_buttons.append(types.InlineKeyboardButton(
            text=f"{page}/{total_pages}",
            callback_data="current_page"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"page_{page+1}"
            ))
            
        keyboard.append(nav_buttons)
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(lambda c: c.data.startswith('region_'))
async def handle_region_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
        region = callback_query.data.split('_')[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        data = await state.get_data()
        car_info = data.get('car_info', {})
        
        brand = car_info.get('brand')
        model = car_info.get('model')
        year = car_info.get('year')
        
        logger.info(f"Selected: brand={brand}, model={model}, year={year}, region={region}")
        
        if not all([brand, model, year]):
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        parser = AutodocCarParser()
        try:
            modifications_data = await parser.search_modifications(brand, model, year, region)
            logger.info(f"Modifications data: {modifications_data}")
            
            if not modifications_data or not modifications_data.get('modifications'):
                await callback_query.message.edit_text(
                    "‚ùå –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                    reply_markup=create_regions_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                modifications=modifications_data['modifications'],
                region=region,
                brand=brand,
                model=model,
                year=year
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
            keyboard = create_modifications_keyboard(modifications_data.get('modifications', []))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üöó {brand} {model} {year}\n"
                f"üåç –†–µ–≥–∏–æ–Ω: {region}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é:"
            )
            
            await callback_query.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
            await state.set_state(SearchStates.viewing_modifications)
            
        except Exception as e:
            logger.error(f"Error getting modifications: {str(e)}")
            await callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω.",
                reply_markup=create_regions_keyboard()
            )
    
    except Exception as e:
        logger.error(
            "Error in region selection handler",
            error=str(e),
            telegram_id=callback_query.from_user.id
        )
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith('page_'))
async def handle_page_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        page = int(callback_query.data.split('_')[1])
        data = await state.get_data()
        modifications = data.get('modifications', [])
        keyboard = create_modifications_keyboard(modifications, page)
        await callback_query.message.edit_text(
            f"{data.get('brand')} {data.get('model')} {data.get('year')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é:",
            reply_markup=keyboard
        )
        await state.update_data(current_page=page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in page selection handler: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith('mod_'))
async def handle_modification_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        _, mod_id = callback_query.data.split('_')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        data = await state.get_data()
        modifications = data.get('modifications', [])
        
        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
        selected_mod = None
        for mod in modifications:
            if str(mod.get("id")) == mod_id:
                selected_mod = mod
                break
        
        if selected_mod:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ attributes
            attributes_dict = {}
            for attr in selected_mod.get('attributes', []):
                attributes_dict[attr['key']] = attr['value']
            
            message_text = [
                "üöó –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if attributes_dict.get('grade'):
                message_text.append(f"‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {attributes_dict['grade']}")
            if attributes_dict.get('transmission'):
                message_text.append(f"‚Ä¢ –ö–ü–ü: {attributes_dict['transmission']}")
            if attributes_dict.get('engine'):
                message_text.append(f"‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª—å: {attributes_dict['engine']}")
            if attributes_dict.get('engineCode'):
                message_text.append(f"‚Ä¢ –ö–æ–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è: {attributes_dict['engineCode']}")
            if attributes_dict.get('power'):
                message_text.append(f"‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: {attributes_dict['power']}")
            if attributes_dict.get('bodyType'):
                message_text.append(f"‚Ä¢ –¢–∏–ø –∫—É–∑–æ–≤–∞: {attributes_dict['bodyType']}")
            if data.get('region'):
                message_text.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {data['region']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã
            for key, value in attributes_dict.items():
                if key not in ['grade', 'transmission', 'engine', 'engineCode', 'power', 'bodyType'] and value:
                    message_text.append(f"‚Ä¢ {key}: {value}")
            
            await callback_query.message.answer("\n".join(message_text))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É –∑–∞–ø—á–∞—Å—Ç–µ–π
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üîç –ò—Å–∫–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏",
                    callback_data=f"search_parts_{mod_id}"
                )]
            ])
            
            await callback_query.message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            
            await callback_query.answer()
        else:
            await callback_query.answer("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in modification selection handler: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏", show_alert=True)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
        dp.update.middleware.register(DatabaseMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await register_handlers(dp)
        
        # –ó–∞–ø—É—Å–∫ Prometheus —Å–µ—Ä–≤–µ—Ä–∞
        start_http_server(config.PROMETHEUS_PORT)
        logger.info(
            "prometheus_server_started",
            port=config.PROMETHEUS_PORT
        )
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("bot_starting")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error("bot_startup_error", error=str(e))
        metrics.error_count.labels(type="startup").inc()
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("bot_shutdown_keyboard_interrupt")
    except Exception as e:
        logger.error("bot_shutdown_error", error=str(e))
    finally:
        logger.info("bot_shutdown_complete")
