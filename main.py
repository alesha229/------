import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from aiohttp import web
from datetime import datetime
from aiogram.fsm.storage.memory import MemoryStorage

import config
from models import Base, User, Subscription
from handlers import admin, subscription, referral
from utils.monitoring import start_monitoring, log_command
from parsers.search_aggregator import SearchAggregator
from parsers.autodoc_car_parser import AutodocCarParser
from parsers.autodoc_article_parser import AutodocArticleParser
from parsers.autodoc_factory import AutodocParserFactory
from webhook_server import app as webhook_app
from database import engine, async_session_maker, DatabaseMiddleware
from keyboards.subscription import get_subscription_keyboard
from keyboards.main import get_main_keyboard

# Configure logging
logging.basicConfig(level=getattr(logging, config.LOG_LEVEL))
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())  # –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM

# Add middleware
dp.update.middleware(DatabaseMiddleware())

# Register routers
dp.include_router(admin.router)
dp.include_router(subscription.router)
dp.include_router(referral.router)

# Initialize parsers
search_aggregator = SearchAggregator()

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

class SearchStates(StatesGroup):
    waiting_for_part_number = State()
    waiting_for_region = State()
    viewing_modifications = State()

class CarSearch(StatesGroup):
    manufacturer = State()
    modifications = State()
    model = State()
    region = State()

@dp.message(Command("start"))
@log_command
async def cmd_start(message: types.Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(User)
        .options(selectinload(User.subscription))
        .where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        session.add(user)
        await session.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å
        from datetime import datetime, timedelta
        trial_subscription = Subscription(
            user_id=user.id,
            is_active=True,
            start_date=datetime.utcnow(),
            period='trial',
            end_date=datetime.utcnow() + timedelta(days=1),
            is_trial=True
        )
        session.add(trial_subscription)
        await session.commit()
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
@log_command
async def search_parts(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: 04465-42160\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ VIN: JF1BL5KS57G03135T\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏: HONDA CIVIC 1996"
    )
    await state.set_state(SearchStates.waiting_for_part_number)

@dp.message(SearchStates.waiting_for_part_number)
@log_command
async def handle_part_number(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–µ—Ç–∞–ª–∏"""
    query = message.text.strip()
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
        search_type = await AutodocParserFactory.get_search_type(query)

        if search_type == "car":
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            parser = AutodocCarParser()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_info = await AutodocParserFactory.extract_car_info(query)

            if car_info:
                brand, model, year = car_info
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
                brand_code = await parser.get_brand_code(brand)
                
                if brand_code:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
                    keyboard_buttons = []
                    current_row = []
                    
                    for region in parser.available_regions:
                        current_row.append(
                            types.InlineKeyboardButton(
                                text=region,
                                callback_data=f"region_{brand}_{model}_{year}_{region}"
                            )
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                        if len(current_row) == 2:
                            keyboard_buttons.append(current_row)
                            current_row = []
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if current_row:
                        keyboard_buttons.append(current_row)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º inline_keyboard
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                    
                    await message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                        reply_markup=keyboard
                    )
                    await state.update_data(brand=brand, model=model, year=year)
                    await state.set_state(SearchStates.waiting_for_region)
                else:
                    await message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ú–ê–†–ö–ê –ú–û–î–ï–õ–¨ –ì–û–î\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: HONDA CIVIC 1996"
                )
                
        elif search_type == "vin":
            # –ü–æ–∏—Å–∫ –ø–æ VIN
            parser = AutodocVinParser()
            result = await parser.search(query)
            if result:
                await message.answer(result)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É VIN")
                
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            parser = AutodocArticleParser()
            results = await parser.search(query)
            if results:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                response = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏:\n\n"
                for i, part in enumerate(results, 1):
                    response += f"{i}. {part.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    response += f"üìù –ê—Ä—Ç–∏–∫—É–ª: {part.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    response += f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {part.get('manufacturer', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    
                    # –¶–µ–Ω–∞
                    price = part.get('price')
                    if price:
                        response += f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                    else:
                        response += "üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"
                    
                    # –ú–∞–≥–∞–∑–∏–Ω
                    source = part.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    response += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {source}\n"
                    
                    # –ù–∞–ª–∏—á–∏–µ
                    if part.get('availability'):
                        response += "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏\n"
                    else:
                        response += "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
                    
                    # URL –µ—Å–ª–∏ –µ—Å—Ç—å
                    if part.get('url'):
                        response += f"üîó {part['url']}\n"
                    
                    response += "\n" + "="*30 + "\n"
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                max_length = 4096
                for i in range(0, len(response), max_length):
                    chunk = response[i:i + max_length]
                    await message.answer(chunk)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É")
                
    except Exception as e:
        logger.error(f"Error in search handler: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )
    finally:
        await state.clear()

def create_modifications_keyboard(modifications, page=1):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
    if not modifications.get('modifications'):
        return types.InlineKeyboardMarkup(inline_keyboard=[])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
    mod_list = modifications.get('modifications', [])
    logger.info(modifications)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –∫–Ω–æ–ø–æ–∫ (—É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    items_per_page = 5
    total_pages = (len(mod_list) + items_per_page - 1) // items_per_page
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    page = max(1, min(page, total_pages))
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(mod_list))
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = []
    for mod in mod_list[start_idx:end_idx]:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        button_text = (
            f"{mod.get('grade', '–ù/–î')} ‚Ä¢ "
            f"{mod.get('transmission', '–ù/–î')} ‚Ä¢ "
            f"{mod.get('doors', '–ù/–î')}–¥ ‚Ä¢ "
            f"({mod.get('dest_region', '–ù/–î')})"
        )
        
        # –°–æ–∑–¥–∞–µ–º callback_data —Å ID –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        callback_data = f"mod_{mod.get('id', '')}"
        
        keyboard.append([
            types.InlineKeyboardButton(
                text=button_text,
                callback_data=callback_data
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–í –Ω–∞—á–∞–ª–æ", –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚èÆ",
            callback_data="page_1"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"page_{page-1}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=f"page_{page+1}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ "–í –∫–æ–Ω–µ—Ü", –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚è≠",
            callback_data=f"page_{total_pages}"
        ))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    keyboard.append([
        types.InlineKeyboardButton(
            text=f"üìÑ {page} –∏–∑ {total_pages}",
            callback_data="page_info"
        )
    ])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query(lambda c: c.data.startswith('region_'))
async def handle_region_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
        _, brand, model, year, region = callback_query.data.split('_')
        
        logger.info(f"Selected: brand={brand}, model={model}, year={year}, region={region}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        parser = AutodocCarParser()
        try:
            modifications_data = await parser.search_modifications(brand, model, year, region)
            logger.info(f"Modifications data: {modifications_data}")
            if not modifications_data or not modifications_data.get('modifications'):
                await callback_query.answer("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                modifications=modifications_data['modifications'],
                region=region,
                brand=brand,
                model=model,
                year=year
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
            keyboard = create_modifications_keyboard(modifications_data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            common_info = []
            for attr in modifications_data.get('commonAttributes', []):
                if attr['key'] in ['Brand', 'Model', 'manufactured']:
                    common_info.append(f"{attr['name']}: {attr['value']}")
            
            message_text = (
                f"üöó {' | '.join(common_info)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é:"
            )
            
            try:
                await callback_query.message.edit_text(
                    text=message_text,
                    reply_markup=keyboard
                )
            except aiogram.exceptions.TelegramBadRequest as e:
                if "message is not modified" not in str(e):
                    raise
                
        except Exception as e:
            logger.error(f"Error getting modifications: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"Error in region selection handler: {e}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

@dp.callback_query(lambda c: c.data.startswith('page_'))
async def handle_page_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        page = int(callback_query.data.split('_')[1])
        data = await state.get_data()
        modifications = data.get('modifications', [])
        keyboard = create_modifications_keyboard({'modifications': modifications}, page)
        await callback_query.message.edit_text(
            f"{data.get('brand')} {data.get('model')} {data.get('year')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é:",
            reply_markup=keyboard
        )
        await state.update_data(current_page=page)
        await callback_query.answer()
    except Exception as e:
        logger.error(f"Error in page selection handler: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith('mod_'))
async def handle_modification_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        _, mod_id = callback_query.data.split('_')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        data = await state.get_data()
        modifications = data.get('modifications', [])
        
        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
        selected_mod = None
        for mod in modifications:
            if str(mod.get("id")) == mod_id:
                selected_mod = mod
                break
        
        if selected_mod:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ attributes
            attributes_dict = {}
            for attr in selected_mod.get('attributes', []):
                attributes_dict[attr['key']] = attr['value']
            
            message_text = [
                "üöó –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if attributes_dict.get('grade'):
                message_text.append(f"‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {attributes_dict['grade']}")
            if attributes_dict.get('transmission'):
                message_text.append(f"‚Ä¢ –ö–ü–ü: {attributes_dict['transmission']}")
            if attributes_dict.get('engine'):
                message_text.append(f"‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª—å: {attributes_dict['engine']}")
            if attributes_dict.get('engineCode'):
                message_text.append(f"‚Ä¢ –ö–æ–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è: {attributes_dict['engineCode']}")
            if attributes_dict.get('power'):
                message_text.append(f"‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: {attributes_dict['power']}")
            if attributes_dict.get('bodyType'):
                message_text.append(f"‚Ä¢ –¢–∏–ø –∫—É–∑–æ–≤–∞: {attributes_dict['bodyType']}")
            if data.get('region'):
                message_text.append(f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {data['region']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã
            for key, value in attributes_dict.items():
                if key not in ['grade', 'transmission', 'engine', 'engineCode', 'power', 'bodyType'] and value:
                    message_text.append(f"‚Ä¢ {key}: {value}")
            
            await callback_query.message.answer("\n".join(message_text))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É –∑–∞–ø—á–∞—Å—Ç–µ–π
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üîç –ò—Å–∫–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏",
                    callback_data=f"search_parts_{mod_id}"
                )]
            ])
            
            await callback_query.message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            
            await callback_query.answer()
        else:
            await callback_query.answer("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in modification selection handler: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏", show_alert=True)

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await start_monitoring()

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(webhook_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("Webhook server started on port 8080")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
