import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from aiohttp import web
from datetime import datetime
from aiogram.fsm.storage.memory import MemoryStorage

import config
from models import Base, User, Subscription
from handlers import admin, subscription, referral
from utils.monitoring import start_monitoring, log_command
from parsers.search_aggregator import SearchAggregator
from parsers.autodoc_car_parser import AutodocCarParser
from parsers.autodoc_article_parser import AutodocArticleParser
from parsers.autodoc_factory import AutodocParserFactory
from webhook_server import app as webhook_app
from database import engine, async_session_maker, DatabaseMiddleware
from keyboards.subscription import get_subscription_keyboard
from keyboards.main import get_main_keyboard

# Configure logging
logging.basicConfig(level=getattr(logging, config.LOG_LEVEL))
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())  # –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM

# Add middleware
dp.update.middleware(DatabaseMiddleware())

# Register routers
dp.include_router(admin.router)
dp.include_router(subscription.router)
dp.include_router(referral.router)

# Initialize parsers
search_aggregator = SearchAggregator()

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

class SearchStates(StatesGroup):
    waiting_for_part_number = State()

class CarSearch(StatesGroup):
    manufacturer = State()
    modifications = State()
    model = State()

@dp.message(Command("start"))
@log_command
async def cmd_start(message: types.Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(User)
        .options(selectinload(User.subscription))
        .where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        session.add(user)
        await session.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å
        from datetime import datetime, timedelta
        trial_subscription = Subscription(
            user_id=user.id,
            is_active=True,
            start_date=datetime.utcnow(),
            period='trial',
            end_date=datetime.utcnow() + timedelta(days=1),
            is_trial=True
        )
        session.add(trial_subscription)
        await session.commit()
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
@log_command
async def search_parts(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
    await state.set_state(SearchStates.waiting_for_part_number)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 90915YZZD4"
    )

@dp.message(SearchStates.waiting_for_part_number)
@log_command
async def handle_part_number(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–µ—Ç–∞–ª–∏"""
    await state.clear()
    part_number = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    result = await session.execute(
        select(User)
        .options(selectinload(User.subscription))
        .where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user or not user.subscription:
        keyboard = get_subscription_keyboard()
        await message.answer(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=keyboard
        )
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    now = datetime.utcnow()
    subscription = user.subscription
    if not subscription.is_active or subscription.end_date < now:
        subscription.is_active = False
        await session.commit()
        
        keyboard = get_subscription_keyboard()
        await message.answer(
            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=keyboard
        )
        return
    
    status_message = await message.answer("üîç –ò—â–µ–º –∑–∞–ø—á–∞—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
        search_type = await AutodocParserFactory.get_search_type(part_number)
        
        if search_type == "article":
            # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            parser = AutodocArticleParser()
            results = await parser.search_by_article(part_number)
            
            if results:
                response = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ü–µ–Ω–µ):\n\n"
                for i, part in enumerate(results, 1):
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if part.get('name'):
                        response += f"{i}. {part['name']}\n"
                    else:
                        response += f"{i}. \n"
                        
                    response += f"üìù –ê—Ä—Ç–∏–∫—É–ª: {part['number']}\n"
                    response += f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {part['manufacturer']}\n"
                    
                    # –¶–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    price = part.get('price', 0)
                    if price > 0:
                        response += f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                    else:
                        response += f"üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚ÇΩ\n"
                        
                    response += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {part['source']}\n"
                    
                    # –ù–∞–ª–∏—á–∏–µ
                    in_stock = part.get('in_stock', 0)
                    if in_stock > 0:
                        response += f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {in_stock} —à—Ç.\n"
                    else:
                        response += "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
                    
                    # URL –µ—Å–ª–∏ –µ—Å—Ç—å
                    if part.get('url'):
                        response += f"\nüîó {part['url']}\n"
                        
                    response += "\n"
            else:
                response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø—á–∞—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
            await status_message.edit_text(response)
            
        elif search_type == "car":
            # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏
            parser = AutodocCarParser()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
            if len(part_number.split()) == 1:
                wizard_data = await parser.get_wizard_data(part_number)
                if wizard_data:
                    models = parser.extract_models(wizard_data)
                    if models:
                        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for model in models:
                            keyboard.add(types.KeyboardButton(model['name']))
                        await status_message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
                        await state.update_data(brand=part_number)
                        await CarSearch.model.set()
                    else:
                        await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è")
                else:
                    await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö")
            else:
                await status_message.edit_text(
                    "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: HONDA"
                )
        
    except Exception as e:
        logger.error(f"Error during part search: {e}")
        await status_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@dp.message(lambda message: message.text.startswith("/search"))
@log_command
async def search_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.replace("/search", "").strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    search_type = await AutodocParserFactory.get_search_type(query)
    
    if search_type == "article":
        # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        parser = AutodocArticleParser()
        results = await parser.search_by_article(query)
        if results:
            response = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ü–µ–Ω–µ):\n\n"
            for i, part in enumerate(results, 1):
                # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if part.get('name'):
                    response += f"{i}. {part['name']}\n"
                else:
                    response += f"{i}. \n"
                    
                response += f"üìù –ê—Ä—Ç–∏–∫—É–ª: {part['number']}\n"
                response += f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {part['manufacturer']}\n"
                
                # –¶–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                price = part.get('price', 0)
                if price > 0:
                    response += f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
                else:
                    response += f"üí∞ –¶–µ–Ω–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞ ‚ÇΩ\n"
                    
                response += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {part['source']}\n"
                
                # –ù–∞–ª–∏—á–∏–µ
                in_stock = part.get('in_stock', 0)
                if in_stock > 0:
                    response += f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {in_stock} —à—Ç.\n"
                else:
                    response += "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
                
                # URL –µ—Å–ª–∏ –µ—Å—Ç—å
                if part.get('url'):
                    response += f"\nüîó {part['url']}\n"
                    
                response += "\n"
        else:
            response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø—á–∞—Å—Ç–∏ —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
        await message.answer(response)
        await state.clear()
        
    else:
        # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏
        parser = AutodocCarParser()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
        if len(query.split()) == 1:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –±—Ä–µ–Ω–¥–∞
            wizard_data = await parser.get_wizard_data(query)
            if wizard_data:
                models = parser.extract_models(wizard_data)
                if models:
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for model in models:
                        keyboard.add(types.KeyboardButton(model['name']))
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)
                    await state.update_data(brand=query)
                    await CarSearch.model.set()
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è")
                    await state.clear()
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö")
                await state.clear()
        else:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            car_info = await AutodocParserFactory.extract_car_info(query)
            if car_info:
                manufacturer, model, year = car_info
                await state.update_data(brand=manufacturer, model=model, year=year)
                wizard_data = await parser.get_wizard_data(manufacturer)
                if wizard_data:
                    modifications = parser.extract_models(wizard_data)
                    if modifications:
                        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        for mod in modifications:
                            keyboard.add(types.KeyboardButton(mod['name']))
                        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é:", reply_markup=keyboard)
                        await CarSearch.modifications.set()
                    else:
                        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                        await state.clear()
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö")
                    await state.clear()
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/search HONDA CIVIC 2020")
                await state.clear()

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await start_monitoring()

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(webhook_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info("Webhook server started on port 8080")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
