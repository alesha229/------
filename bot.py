import sys
import locale
import json

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')
    locale.setlocale(locale.LC_ALL, 'Russian_Russia.1251')

import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict

from config import config
from models import Base, User, Subscription
from handlers import admin, subscription, referral
from utils.logger import logger
from utils.metrics import metrics
from database import engine, async_session_maker, DatabaseMiddleware
from keyboards.main import get_main_keyboard, get_search_keyboard
from parsers.autodoc_factory import AutodocParserFactory
from parsers.search_aggregator import SearchAggregator
from parsers.autodoc_car_parser import AutodocCarParser
from utils.response_logger import response_logger

class SearchStates(StatesGroup):
    waiting_for_part_number = State()
    waiting_for_region = State()
    viewing_modifications = State()

class CarSearchStates(StatesGroup):
    waiting_for_brand = State()
    waiting_for_model = State()
    waiting_for_year = State()
    selecting_field = State()
    selecting_field_value = State()
    viewing_modifications = State()
    viewing_parts_tree = State()

class CarSearch(StatesGroup):
    manufacturer = State()
    modifications = State()
    model = State()
    region = State()

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=config.BOT_TOKEN)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.parser_factory = AutodocParserFactory()
        self.search_aggregator = SearchAggregator()
        
    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        self.dp.update.middleware.register(DatabaseMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.dp.include_router(admin.router)
        self.dp.include_router(subscription.router)
        self.dp.include_router(referral.router)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self.dp.message.register(self.cmd_start, Command("start"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.dp.message.register(self.search_parts, F.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
        self.dp.message.register(self.handle_subscription, F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
        self.dp.message.register(self.handle_profile, F.text == "üì± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        self.dp.message.register(self.handle_help, F.text == "‚ùì –ü–æ–º–æ—â—å")
        self.dp.message.register(self.handle_referral, F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ –ø–æ–∏—Å–∫–∞
        self.dp.message.register(self.handle_new_search, F.text == "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")
        self.dp.message.register(self.handle_search_history, F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")
        self.dp.message.register(self.handle_main_menu, F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
        self.dp.message.register(self.handle_search_stats, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞")
        self.dp.message.register(self.handle_settings, F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self.dp.message.register(self.handle_part_number, SearchStates.waiting_for_part_number)
        self.dp.callback_query.register(self.handle_region_selection, lambda c: c.data.startswith("region_"))
        self.dp.callback_query.register(self.handle_page_selection, lambda c: c.data.startswith("page_"))
        self.dp.callback_query.register(self.handle_modification_selection, lambda c: c.data.startswith("mod_"))
        self.dp.message.register(self.handle_car_search, F.text == "üöó –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ")
        self.dp.callback_query.register(self.handle_wizard_selection, lambda c: c.data.startswith("wizard_"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏/–≥–æ–¥—É
        self.dp.message.register(self.handle_brand_input, CarSearchStates.waiting_for_brand)
        self.dp.message.register(self.handle_model_input, CarSearchStates.waiting_for_model)
        self.dp.message.register(self.handle_year_input, CarSearchStates.waiting_for_year)
        self.dp.callback_query.register(self.handle_field_selection, CarSearchStates.selecting_field)
        self.dp.callback_query.register(self.handle_field_value_selection, CarSearchStates.selecting_field_value)
        self.dp.callback_query.register(self.handle_back_to_fields, lambda c: c.data == "back_to_fields")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
        self.dp.callback_query.register(
            self.handle_modification_selection,
            lambda c: c.data.startswith("select_mod_")
        )
        
        self.dp.callback_query.register(
            self.handle_back_to_modifications,
            lambda c: c.data == "back_to_modifications"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–µ—Ä–µ–≤—É –∑–∞–ø—á–∞—Å—Ç–µ–π
        self.dp.callback_query.register(
            self.handle_parts_navigation,
            lambda c: c.data.startswith("parts_select_") or c.data == "parts_back"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ä–µ–≤–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        self.dp.callback_query.register(
            self.handle_parts_navigation,
            CarSearchStates.viewing_parts_tree,
            lambda c: c.data.startswith("parts_select_") or c.data == "parts_back"
        )
        
        self.dp.callback_query.register(
            self.handle_back_to_modifications,
            CarSearchStates.viewing_parts_tree,
            lambda c: c.data == "back_to_modifications"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
        self.dp.callback_query.register(
            self.handle_modification_page,
            lambda c: c.data.startswith("mod_page_")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–∏
        self.dp.callback_query.register(
            self.handle_spare_part_selection,
            lambda c: c.data.startswith("spare_part_")
        )

    @staticmethod
    async def cmd_start(message: types.Message, session: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        metrics.user_commands.labels(command="start").inc()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User)
                .options(selectinload(User.subscription))
                .where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    registered_at=datetime.utcnow()
                )
                session.add(user)
                await session.commit()
                
                logger.info(f"New user registered: {user.telegram_id}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            has_active_subscription = (
                user.subscription and 
                user.subscription.valid_until and 
                user.subscription.valid_until > datetime.utcnow()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "üîç –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ ÔøΩÔøΩÔøΩÔøΩ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ ÔøΩÔøΩ–≤—ÇÔøΩÔøΩÔøΩÔøΩ.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —É–∂–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ–∏—Å–∫–∞:"
            )
            
            await message.answer(
                welcome_text,
                reply_markup=get_main_keyboard(has_subscription=has_active_subscription)
            )
            
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def search_parts(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, VIN-–Ω–æ–º–µ—Ä –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–ê–†–ö–ê –û–î–ï–õ–¨ –ì–û–î\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: honda civic 1996",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], 
                resize_keyboard=True
            )
        )
        await state.set_state(SearchStates.waiting_for_part_number)

    async def handle_part_number(self, message: types.Message, state: FSMContext):
        """–û–±—ÄÔøΩÔøΩÔøΩÔøΩ–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞/VIN –∏–ª–∏ –ΩÔøΩÔøΩ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return

        # –ü—Ä–æ–≤–µÔøΩÔøΩ—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
        parts = message.text.strip().split()
        
        if len(parts) >= 3 and parts[-1].isdigit():
            # –≠—Ç–æ –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏/–≥–æ–¥—É
            brand = parts[0].upper()  # AUDI
            model = parts[1]          # 100
            year = parts[-1]          # 1996
            
            parser = AutodocCarParser()
            initial_query = f"{brand} {model} {year}"
            
            search_result = await parser.step_by_step_search(initial_query)
            if not search_result:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            known_values = {
                'Model': model,            # 100 - –±—É–¥–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å '–ú–æ–¥–µ–ª—å'
                'year': year,             # 1996 - –±—É–¥–µ—Ç —ÅÔøΩÔøΩ–ø–æ—Å—Ç–∞–≤–ª–µ–ΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ —Å –æ–±–æ–∏–º–∏ –≤–∞—ÄÔøΩÔøΩ–∞–Ω—Ç–∞–º–∏ –≥–æ–¥–∞
                'Brand': brand            # AUDI - –±—É–¥–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å '–ú–∞—Ä–∫–∞'
            }
            standardized_values = response_logger.standardize_parameters(known_values)
            logger.info(f"[–ü–û–ò–°–ö] –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {standardized_values}")

            # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
            current_ssd = None
            fields = list(search_result.get('available_fields', {}).items())
            auto_filled = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æÔøΩÔøΩ–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            for field_name, field_data in fields:
                standard_key = response_logger.get_parameter_key(field_name)
                if standard_key in standardized_values:
                    target_value = standardized_values[standard_key]
                    logger.info(f"[–ü–û–ò–°–ö] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ {field_name} ({standard_key}) —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º {target_value}")
                    
                    # –î–ª—è –≥–æ–¥–∞ –ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    if field_name.lower() in ['–≥–æ–¥', '–≥–æ–¥ –≤—ã–ø—É—Å–∫–∞', '–≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å–≤–∞']:
                        # –ü—Ä–æ–≤–µ—Ä—è–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥–æ–¥–∞
                        for option in field_data['options']:
                            if target_value == option['value']:
                                current_ssd = option['key']
                                logger.info(f"[–ü–û–ò–°–ö] –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ–¥–∞: {option['value']}, ssd={current_ssd}")
                                auto_filled = True
                                
                                # –ü–æ–ªÔøΩÔøΩ—á–∞–µ–º –æ–±–Ω–æ–≤–ªÔøΩÔøΩ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                search_result = await parser.step_by_step_search({
                                    'brand_code': search_result.get('brand_code'),
                                    'ssd': current_ssd
                                })
                                
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                                if not search_result.get('available_fields'):
                                    break
                                
                                # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                                continue
                    
                    # –î–ª—è —Å—Ç–∞–ª—å–Ω—ãÔøΩÔøΩ –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    else:
                        for option in field_data['options']:
                            if target_value.upper() in option['value'].upper():
                                current_ssd = option['key']
                                logger.info(f"[–ü–û–ò–°–ö] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {option['value']}, ssd={current_ssd}")
                                auto_filled = True
                                
                                search_result = await parser.step_by_step_search({
                                    'brand_code': search_result.get('brand_code'),
                                    'ssd': current_ssd
                                })
                                break
                    
                    if auto_filled:
                        break

            # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —á—Ç–æ-—Ç–æ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if auto_filled:
                logger.info("[–ü–û–ò–°–ö] –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
                await state.update_data(
                    search_result=search_result,
                    current_ssd=current_ssd,
                    known_values=standardized_values
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—ÜÔøΩÔøΩ–∏
                search_message = await message.answer("–í—ã–ø–æÔøΩÔøΩ–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")
                await self.show_available_fields(search_message, state)
                return

            # –ï—Å–ª–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
            keyboard = []
            for idx, (field_name, _) in enumerate(fields, 1):
                display_name = response_logger.get_parameter_key(field_name)
                keyboard.append([InlineKeyboardButton(
                    text=display_name,
                    callback_data=f"field_{idx}"
                )])
            
            keyboard.append([InlineKeyboardButton(
                text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                callback_data="show_modifications"
            )])
            
            search_message = await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            await state.update_data(
                search_result=search_result,
                current_ssd=None,
                known_values=standardized_values,
                message_id=search_message.message_id
            )
            await state.set_state(CarSearchStates.selecting_field)

    @staticmethod
    async def handle_region_selection(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
        region = callback_query.data.replace("region_", "")
        data = await state.get_data()
        part_number = data.get("part_number")
        
        if not part_number:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–µÔøΩÔøΩ–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        await callback_query.answer()
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–∏—Ñ–∏–∞—Ü–∏–π
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        modifications = [
            {"id": 1, "name": "Modification 1", "price": 100},
            {"id": 2, "name": "Modification 2", "price": 200},
        ]
        
        if not modifications:
            await callback_query.message.answer(
                "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω."
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ãÔøΩÔøΩ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏ÔøΩÔøΩ
        await state.update_data(
            region=region,
            modifications=modifications,
            current_page=1
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        keyboard = create_modifications_keyboard(modifications)
        await callback_query.message.answer(
            f"–ù–∞–πÔøΩÔøΩÔøΩÔøΩ–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–∏–∞–Ω—Ç—ã –¥–ª –∞—Ä—Ç–∏–∫—ÉÔøΩÔøΩ–∞ {part_number}:",
            reply_markup=keyboard
        )
        await state.set_state(SearchStates.viewing_modifications)

    @staticmethod
    async def handle_page_selection(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        page = int(callback_query.data.replace("page_", ""))
        data = await state.get_data()
        
        modifications = data.get("modifications", [])
        keyboard = create_modifications_keyboard(modifications, page)
        
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        await callback_query.answer()

    async def handle_modification_selection(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—ÄÔøΩÔøΩ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫ÔøΩÔøΩ—Ü–∏–∏"""
        try:
            mod_id = callback_query.data.split('_')[2]
            data = await state.get_data()
            modifications = data.get('modifications', [])
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
            selected_mod = next((mod for mod in modifications if str(mod['id']) == mod_id), None)
            
            if not selected_mod:
                await callback_query.answer("–ú–æ–¥–∏—Ñ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            try:
                parser = AutodocCarParser()
                brand_code = data['search_result'].get('brand_code')
                logger.info(f"Getting parts list for brand_code={brand_code}, car_id={selected_mod['id']}, ssd={selected_mod['car_ssd']}")
                parts_data = await parser.get_parts_list(
                    brand_code, 
                    selected_mod['id'],
                    selected_mod['car_ssd']
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –µ—Ä–µ–≤–µ –∑–∞–ø—á–∞—Å—Ç–µ–π
                response_logger.log_parts_data(parts_data)
                
                if not parts_data or 'data' not in parts_data:
                    await callback_query.answer("–°–ø–∏—Å–æ–∫ –∑–∞–ø—áÔøΩÔøΩ—Å—ÇÔøΩÔøΩ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return

                # –ü–æ–ª—É—á–∞–µÔøΩÔøΩ –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                root_categories = parts_data['data']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(
                    current_parts_data=root_categories,
                    current_path=[],
                    selected_modification=selected_mod
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                spec_text = f"üöó {selected_mod.get('grade', '–ù/–î')} {selected_mod.get('transmission', '–ù/–î')}"
                if selected_mod.get('doors') != '–ù/–î':
                    spec_text += f" ({selected_mod.get('doors', '–ù/–î')})"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                keyboard = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
                for idx, category in enumerate(root_categories):
                    if isinstance(category, dict) and 'name' in category:
                        name = category['name']
                        if len(name) > 30:
                            name = name[:27] + "..."
                        keyboard.append([InlineKeyboardButton(
                            text=f"üì¶ {name}",
                            callback_data=f"parts_select_{idx}"
                        )])
                        logger.info(f"Added category button: {name}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard.append([InlineKeyboardButton(
                    text="ÔøΩÔøΩÔøΩÔ∏è –ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º",
                    callback_data="back_to_modifications"
                )])
                
                await callback_query.message.edit_text(
                    spec_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
                
                await state.set_state(CarSearchStates.viewing_parts_tree)
                await callback_query.answer()
                
            except Exception as e:
                logger.error(f"Error getting parts list: {e}", exc_info=True)
                await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
                return
                
        except Exception as e:
            logger.error(f"Error handling modification selection: {e}", exc_info=True)
            await callback_query.answer("–ü—ÄÔøΩÔøΩ–∏–∑ÔøΩÔøΩ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—ÄÔøΩÔøΩ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def handle_parts_navigation(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–µ—Ä–µ–≤—É –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        try:
            data = await state.get_data()
            current_path = data.get('current_path', [])
            parts_data = data.get('current_parts_data', [])
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—á–∞—Å—Ç–µ–π, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            message_ids = data.get('spare_parts_messages', [])
            if message_ids:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                for msg_id in message_ids[:-1]:
                    try:
                        await callback.message.bot.delete_message(
                            chat_id=callback.message.chat.id,
                            message_id=msg_id
                        )
                    except Exception as e:
                        logger.error(f"Error deleting message {msg_id}: {e}")
            
            if callback.data == "parts_back":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
                if current_path:
                    current_path.pop()
                    await state.update_data(current_path=current_path)
                    await self.show_parts_level(callback.message, state)
                else:
                    # –ï—Å–ª–∏ –º—ã ÔøΩÔøΩ–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º
                    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—á–∞—Å—Ç–µ–π
                    if message_ids and len(message_ids) > 0:
                        try:
                            await callback.message.bot.delete_message(
                                chat_id=callback.message.chat.id,
                                message_id=message_ids[-1]
                            )
                        except Exception as e:
                            logger.error(f"Error deleting last message: {e}")
                    await self.handle_back_to_modifications(callback, state)
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ
                selected_idx = int(callback.data.split('_')[2])
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                current_level = parts_data
                for index in current_path:
                    current_level = current_level[index].get('children', [])
                
                selected_item = current_level[selected_idx]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—É—Ä–æ–≤–Ω–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
                if 'children' in selected_item and selected_item['children']:
                    current_path.append(selected_idx)
                    await state.update_data(current_path=current_path)
                    await self.show_parts_level(callback.message, state)
                elif selected_item.get('canBeSearched', False):
                    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π —É–∑–µ–ª –∏ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π
                    await self.show_spare_parts_list(callback, selected_item, state)
                else:
                    await callback.answer("–≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in parts navigation: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

    async def handle_car_search(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏/–≥–æ–¥—É"""
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ªÔøΩÔøΩ:", reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], 
            resize_keyboard=True
        ))
        await state.set_state(CarSearchStates.waiting_for_brand)

    async def handle_brand_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ä–∏"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return
            
        await state.update_data(brand=message.text.upper())
        await message.answer("–¢–µ–ø—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        await state.set_state(CarSearchStates.waiting_for_model)

    async def handle_model_input(self, message: types.Message, state: FSMContext):
        """–ûÔøΩÔøΩ—ÄÔøΩÔøΩÔøΩÔøΩ–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ÔøΩÔøΩÔøΩÔøΩ–¥–µ–ª–∏"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return
            
        await state.update_data(model=message.text)
        await message.answer("–í–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:")
        await state.set_state(CarSearchStates.waiting_for_year)

    async def handle_year_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ÔøΩÔøΩ–æ–¥–∞ –≥–æÔøΩÔøΩ–∞"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return
            
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µÔøΩÔøΩ–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ãÔøΩÔøΩ –≥–æ–¥")
            return
            
        data = await state.get_data()
        brand = data['brand']
        model = data['model']
        year = message.text
        
        parser = AutodocCarParser()
        initial_query = f"{brand} {model} {year}"
        
        search_result = await parser.step_by_step_search(initial_query)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏ÔøΩÔøΩÔøΩ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        search_message = await message.answer("–í—ã–ø–æÔøΩÔøΩ–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")
        await state.update_data(
            search_result=search_result,
            current_ssd=None,
            known_values={'–ú–æ–¥–µ–ª—å': model, '–ì–æ–¥': year},
            message_id=search_message.message_id
        )
        
        await self.show_available_fields(search_message, state)

    async def show_available_fields(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã–µ –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        data = await state.get_data()
        search_result = data['search_result']
        fields = list(search_result.get('available_fields', {}).items())
        
        if not fields:
            if data.get('current_ssd'):
                await self.show_modifications(message, state)
            else:
                await message.edit_text("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µÔøΩÔøΩ!")
                await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –øÔøΩÔøΩ–ª—è
        known_values = data.get('known_values', {})
        current_ssd = data.get('current_ssd')
        auto_filled = False
        parser = AutodocCarParser()
        
        for field_name, field_data in fields:
            if field_name in known_values:
                target_value = known_values[field_name]
                for option in field_data['options']:
                    if target_value.upper() in option['value'].upper():
                        current_ssd = option['key']
                        search_result = await parser.step_by_step_search({
                            'brand_code': search_result.get('brand_code'),
                            'ssd': current_ssd
                        })
                        auto_filled = True
                        await state.update_data(
                            search_result=search_result,
                            current_ssd=current_ssd
                        )
                        logger.info(f"Auto filled: {search_result}, current_ssd: {current_ssd}")
                        await self.show_available_fields(message, state)
                        return
                if auto_filled:
                    return
            
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
        keyboard = []
        for idx, (field_name, _) in enumerate(fields, 1):
            keyboard.append([InlineKeyboardButton(
                text=field_name,
                callback_data=f"field_{idx}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫ÔøΩÔøΩ—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            callback_data="show_modifications"
        )])
        
        await message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CarSearchStates.selecting_field)

    async def handle_field_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ callback_data
            if callback.data == "show_modifications":
                await self.show_modifications(callback.message, state)
                await callback.answer()
                return
            elif callback.data == "back_to_fields":
                await self.handle_back_to_fields(callback, state)
                await callback.answer()
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æÔøΩÔøΩ–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
            parts = callback.data.split('_')
            if len(parts) < 2 or not parts[1].isdigit():
                logger.error(f"Invalid callback data format: {callback.data}")
                await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            field_idx = int(parts[1]) - 1
            data = await state.get_data()
            fields = list(data['search_result'].get('available_fields', {}).items())
            
            if 0 <= field_idx < len(fields):
                field_name, field_data = fields[field_idx]
                keyboard = []
                
                for idx, option in enumerate(field_data['options'], 1):
                    keyboard.append([InlineKeyboardButton(
                        text=option['value'],
                        callback_data=f"value_{idx}_{field_idx}"
                    )])
                    
                keyboard.append([InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_fields"
                )])
                    
                await callback.message.edit_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_name}:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
                await state.set_state(CarSearchStates.selecting_field_value)
                await callback.answer()
            else:
                await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è")
                
        except Exception as e:
            logger.error(f"Error in field selection: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æÔøΩÔøΩ—è")

    async def handle_field_value_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—ÇÔøΩÔøΩ–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
        value_idx, field_idx = map(int, callback.data.split('_')[1:])
        data = await state.get_data()
        fields = list(data['search_result'].get('available_fields', {}).items())
        field_name, field_data = fields[field_idx]
        
        selected_option = field_data['options'][value_idx - 1]
        current_ssd = selected_option['key']
        
        parser = AutodocCarParser()
        search_result = await parser.step_by_step_search({
            'brand_code': data['search_result'].get('brand_code'),
            'ssd': current_ssd
        })
        
        await state.update_data(
            search_result=search_result,
            current_ssd=current_ssd
        )
        
        # –ü—ÄÔøΩÔøΩ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è
        known_values = data.get('known_values', {})
        available_fields = search_result.get('available_fields', {})
        
        # –¶–∏–∫–ª –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ÅÔøΩÔøΩ –ø–æ–ª—è
        while True:
            auto_filled = False
            current_fields = list(search_result.get('available_fields', {}).items())
            
            for field_name, field_data in current_fields:
                if field_name in known_values:
                    target_value = known_values[field_name]
                    for option in field_data['options']:
                        if target_value.upper() in option['value'].upper():
                            current_ssd = option['key']
                            search_result = await parser.step_by_step_search({
                                'brand_code': search_result.get('brand_code'),
                                'ssd': current_ssd
                            })
                            auto_filled = True
                            await state.update_data(
                                search_result=search_result,
                                current_ssd=current_ssd
                            )
                            break
                    if auto_filled:
                        break
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if not auto_filled:
                break
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µÔøΩÔøΩ–Ω—ã–µ –ø–æÔøΩÔøΩ—è
        fields = list(search_result.get('available_fields', {}).items())
        if not fields:
            if current_ssd:
                await self.show_modifications(callback.message, state)
            else:
                await callback.message.edit_text("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                await state.clear()
            return
            
        keyboard = []
        for idx, (field_name, _) in enumerate(fields, 1):
            keyboard.append([InlineKeyboardButton(
                text=field_name,
                callback_data=f"field_{idx}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            callback_data="show_modifications"
        )])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ªÔøΩÔøΩ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CarSearchStates.selecting_field)
        await callback.answer()

    async def search_modifications(self, brand_code: str, current_ssd: str) -> str:
        """–ü–æ–∏—Å–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∏ –ø–æ–ª—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        logger.info(f"Searching modifications with brand_code={brand_code}, current_ssd={current_ssd}")
        parser = AutodocCarParser()
        
        if current_ssd:
            logger.info("Getting modifications...")
            mod_result = await parser.display_modifications(brand_code, current_ssd)
            logger.info(f"Got modifications result: {mod_result}")
            
            if mod_result:
                car_id, ssd = mod_result
                logger.info(f"Getting parts list for car_id={car_id}, ssd={ssd}")
                parts_data = await parser.get_parts_list(brand_code, car_id, ssd)
                logger.info(f"Got parts data: {parts_data}")
                return parser.display_parts_tree(parts_data)
        return None

    async def show_modifications(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫ÔøΩÔøΩ–∑–∞—Ç—å –º–æÔøΩÔøΩ–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            data = await state.get_data()
            logger.info(f"[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
            
            if not data.get('current_ssd'):
                logger.error("[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç current_ssd –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                await message.edit_text(
                    "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields")
                    ]])
                )
                return
            
            parser = AutodocCarParser()
            brand_code = data['search_result'].get('brand_code')
            current_ssd = data.get('current_ssd')
            
            logger.info(f"[–ú–û–î–òÔøΩÔøΩÔøΩÔøΩ–ö–ê–¶–ò–ò] –ó–∞–ø—Ä–æ—Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: brand_code={brand_code}, ssd={current_ssd}")
            modifications = await parser.get_wizard_modifications(brand_code, current_ssd)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            response_logger.log_modification_data(modifications)
            
            logger.info(f"[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {modifications}")
            
            if not modifications or not modifications.get('specificAttributes'):
                logger.warning("[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
                await message.edit_text(
                    "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields")
                    ]])
                )
                return
            
            # –ê–Ω–∞–ª–∏–∑—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            specific_attrs = modifications.get('specificAttributes', [])
            logger.info(f"[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(specific_attrs)}")
            if specific_attrs:
                logger.info(f"[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –ü—Ä–∏–º–µ—Ä –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–µ—Ä–≤–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {specific_attrs[0].get('attributes', [])}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏ÔøΩÔøΩ
            formatted_mods = []
            keyboard = []
            
            for mod in specific_attrs:
                try:
                    attributes = {attr['key']: attr['value'] for attr in mod.get('attributes', [])}
                    car_id = mod.get('carId')
                    car_ssd = next((attr['value'] for attr in mod.get('attributes', []) if attr['key'] == 'Ssd'), None)
                    
                    formatted_mod = {
                        'id': car_id,
                        'car_ssd': car_ssd
                    }
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ–º–∞—Ü–∏—é –æ –ø–æ–¥—Ñ–∏–∫–∞—Ü–∏–∏
                    info_parts = response_logger.get_modification_info(attributes)
                    formatted_mod.update(attributes)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    formatted_mods.append(formatted_mod)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
                    button_text = " | ".join(info_parts) if info_parts else "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    if len(button_text) > 35:
                        button_text = button_text[:32] + "..."
                    
                    keyboard.append([InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"select_mod_{formatted_mod['id']}"
                    )])
                    
                except Exception as e:
                    logger.error(f"[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—è–º",
                callback_data="back_to_fields"
            )])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            common_info = parser.format_common_info(modifications.get('commonAttributes', []))
            logger.info(f"[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {common_info}")
            
            info_text = "üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            important_fields = ['–ë—Ä–µ–Ω–¥', '–ú–æ–¥–µ–ª—å', '–ì–¥', '–†–µ–≥–∏–æ–Ω']
            for key, value in common_info.items():
                if key in important_fields and value and value != '–ù/–î':
                    info_text += f"‚Ä¢ {key}: {value}\n"
            
            info_text += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:"
            
            await message.edit_text(
                info_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(modifications=formatted_mods)
            await state.set_state(CarSearchStates.viewing_modifications)
            
        except Exception as e:
            logger.error(f"[–ú–û–î–ò–§–ò–ö–ê–¶–ò–ò] –û—à–∏–±–∫–∞ ÔøΩÔøΩ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: {e}", exc_info=True)
            await message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields")
                ]])
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    async def handle_modification_page(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        try:
            page = int(callback.data.split('_')[2])
            await self.show_modifications(callback.message, state, page)
            await callback.answer()
        except Exception as e:
            logger.error(f"Error handling modification page: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

    async def handle_back_to_fields(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–µ–π"""
        data = await state.get_data()
        search_result = data.get('search_result', {})
        fields = list(search_result.get('available_fields', {}).items())
        
        keyboard = []
        for idx, (field_name, _) in enumerate(fields, 1):
            keyboard.append([InlineKeyboardButton(
                text=field_name,
                callback_data=f"field_{idx}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            callback_data="show_modifications"
        )])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CarSearchStates.selecting_field)
        await callback.answer()

    def format_parts_tree(self, parts_data, level=0):
        """–§–æÔøΩÔøΩ–º–∞—Ç–∏—Ä–æÔøΩÔøΩ–∞–Ω–∏–µ –¥–µ—Ä–µÔøΩÔøΩ–∞ –∑–∞—á–∞—Å—Ç–µ–π –≤ —Ç–µ–∫—Å—Ç"""
        result = []
        indent = "  " * level
        
        for item in parts_data:
            result.append(f"{indent}üì¶ {item['name']}")
            if 'children' in item:
                result.extend(self.format_parts_tree(item['children'], level + 1))
                
        return "\n".join(result)

    def split_long_message(self, text, max_length=4096):
        """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
        return [text[i:i+max_length] for i in range(0, len(text), max_length)]

    async def handle_wizard_selection(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ wizard"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤ wizard
        await callback_query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –†–µ–∏—Å—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–æ—Ç—á–∏–∫–∏
            await self.register_handlers()
            
            # –∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("bot_starting")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error("bot_startup_error", error=str(e))
            metrics.error_count.labels(type="startup").inc()
            raise

    async def handle_subscription(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")

    async def handle_profile(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        await message.answer(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=get_profile_keyboard()
        )

    async def handle_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ –ö–∞–∫ –ø–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "1. –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π - –ø–∏—Å–∫ ÔøΩÔøΩ–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ VIN\n"
            "2. –ü–æ–¥–ø–∏—Å–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö\n"
            "3. –ü—Ä–æ—Ñ–∏–ª—å - –≤–∞–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "4. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞ÔøΩÔøΩ—Ç–µ—Å—å –∫ @admin"
        )
        await message.answer(help_text)

    async def handle_referral(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")

    async def handle_new_search(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        await self.search_parts(message)

    async def handle_search_history(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"""
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–∏—Å–∫–æ–≤")

    async def handle_main_menu(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )

    async def handle_search_stats(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ΩÔøΩÔøΩ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å–∫–∞"""
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –ø–∏—Å–∫–æ–≤")

    async def handle_settings(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—ÄÔøΩÔøΩ—Ñ–∏–ª")

    async def handle_back_to_modifications(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–±–æ—Ç—á–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        try:
            await self.show_modifications(callback.message, state)
            await callback.answer()
        except Exception as e:
            logger.error(f"Error handling back to modifications: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π")

    async def show_part_details(self, callback: types.CallbackQuery, part_info: dict):
        """–ü–æ–∫–∞–∑—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ –∑–∞–ø—á–∞—Å—Ç–∏"""
        try:
            info_text = f"üì¶ –î–µ—Ç–∞–ª—å: {part_info['name']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if 'article' in part_info:
                info_text += f"–ê—Ä—Ç–∏–∫—É–ª: {part_info['article']}\n"
            if 'oem' in part_info:
                info_text += f"OEM: {part_info['oem']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ
            if 'description' in part_info and part_info['description']:
                desc = part_info['description']
                if len(desc) > 100:
                    desc = desc[:97] + "..."
                info_text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏", callback_data=f"find_analogs_{part_info.get('article', '')}")],
                [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_part_{part_info.get('article', '')}")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="parts_back")]
            ]
            
            await callback.message.edit_text(
                info_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error showing part details: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç–∞–ª–∏")

    async def show_spare_parts_list(self, callback: types.CallbackQuery, part_info: dict, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            data = await state.get_data()
            selected_mod = data.get('selected_modification', {})
            brand_code = data['search_result'].get('brand_code')
            
            parts_data = await self.get_group_parts(
                brand_code,
                selected_mod['id'],
                part_info['quickGroupId'],
                selected_mod['car_ssd']
            )
            
            response_logger.log_spare_parts_data(parts_data)
            
            if not parts_data or 'items' not in parts_data:
                await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            items = parts_data['items']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É–∑–ª–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            unit_info = ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É —É–∑–ª–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if items and 'imageUrl' in items[0]:
                image_url = items[0]['imageUrl'].replace('%size%', 'source')
                unit_info = f'<a href="{image_url}">‚Å†</a>'
            
            unit_info += f"üì¶ {part_info['name']}\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            positions = {}
            for item in items:
                spare_parts = item.get('spareParts', [])
                for part in spare_parts:
                    code = part.get('codeOnImage', '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞')
                    if code not in positions:
                        positions[code] = []
                    
                    article_info = {
                        'number': part.get('partNumber', '–ù/–î'),
                        'name': part.get('name', ''),
                        'manufacturer': part.get('manufacturer', '–û—Ä–∏–≥–∏–Ω–∞–ª')
                    }
                    positions[code].append(article_info)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
            def get_position_number(pos):
                try:
                    return int(pos) if pos != '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞' else float('inf')
                except ValueError:
                    return float('inf')
            
            sorted_positions = sorted(positions.items(), key=lambda x: get_position_number(x[0]))
            
            MAX_MESSAGE_LENGTH = 4096
            messages = []
            current_message = ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ö–µ–º—É –≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_message = ""
            if items and 'imageUrl' in items[0]:
                image_url = items[0]['imageUrl'].replace('%size%', 'source')
                current_message = f'<a href="{image_url}">‚Å†</a>'
            
            current_message += f"üì¶ {part_info['name']}\n\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
            for code, articles in sorted_positions:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                position_block = ""
                if code != '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞':
                    position_block += f"üìç –ü–æ–∑–∏—Ü–∏—è {code}:\n"
                else:
                    position_block += f"\nüìç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n"
                
                sorted_articles = sorted(articles, 
                    key=lambda x: (x['manufacturer'] != '–û—Ä–∏–≥–∏–Ω–∞–ª', x['manufacturer'], x['name']))
                
                for article in sorted_articles:
                    article_line = f"‚Ä¢ {article['name']} - {article['number']}"
                    if article['manufacturer'] != '–û—Ä–∏–≥–∏–Ω–∞–ª':
                        article_line += f" ({article['manufacturer']})"
                    article_line += "\n"
                    position_block += article_line
                position_block += "\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –±–ª–æ–∫ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(current_message + position_block) > MAX_MESSAGE_LENGTH:
                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    if current_message:
                        messages.append(current_message)
                    current_message = position_block
                else:
                    current_message += position_block
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
            if current_message:
                messages.append(current_message)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="parts_back")]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            message_ids = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            first_message = True
            for idx, message_text in enumerate(messages):
                if first_message:
                    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    edited_msg = await callback.message.edit_text(
                        text=message_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if idx == len(messages) - 1 else None,
                        parse_mode="HTML",
                        link_preview_options={"is_disabled": False, "show_above_text": True, "force": True}
                    )
                    message_ids.append(edited_msg.message_id)
                    first_message = False
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–µ
                    new_msg = await callback.message.answer(
                        text=message_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard) if idx == len(messages) - 1 else None,
                        parse_mode="HTML"
                    )
                    message_ids.append(new_msg.message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                current_spare_parts=items,
                spare_parts_messages=message_ids
            )
            
        except Exception as e:
            logger.error(f"Error showing spare parts list: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π")

    async def handle_find_analogs(self, callback: types.CallbackQuery, article: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤"""
        try:
            await callback.answer("–ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        except Exception as e:
            logger.error(f"Error finding analogs: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∞–ª–æ–≥–æ–≤")

    async def handle_buy_part(self, callback: types.CallbackQuery, article: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—á–∞—Å—Ç–∏"""
        try:
            await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        except Exception as e:
            logger.error(f"Error handling buy part: {e}", exc_info=True)
            await callback.answer("–ü–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏")

    async def show_parts_level(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ä–µ–≤–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        try:
            data = await state.get_data()
            parts_data = data.get('current_parts_data', [])
            current_path = data.get('current_path', [])
            selected_mod = data.get('selected_modification', {})
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ä–µ–≤–∞
            current_level = parts_data
            for index in current_path:
                current_level = current_level[index].get('children', [])
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            for idx, item in enumerate(current_level):
                name = item['name']
                if len(name) > 30:
                    name = name[:27] + "..."
                    
                keyboard.append([InlineKeyboardButton(
                    text=f"üì¶ {name}",
                    callback_data=f"parts_select_{idx}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—ÜÔøΩÔøΩ–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_row = []
            if current_path:
                nav_row.append(InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="parts_back"
                ))
            else:
                nav_row.append(InlineKeyboardButton(
                    text="‚óÄÔ∏è –ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º",
                    callback_data="back_to_modifications"
                ))
            keyboard.append(nav_row)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–æ–ª–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
            spec_parts = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ –µ—Å—Ç—å –∏ –Ω–µ —Ä–∞–≤–Ω–æ '–ù/–î'
            if selected_mod.get('grade') and selected_mod['grade'] != '–ù/–î':
                spec_parts.append(selected_mod['grade'])
            
            if selected_mod.get('transmission') and selected_mod['transmission'] != '–ù/–î':
                spec_parts.append(selected_mod['transmission'])
            
            if selected_mod.get('doors') and selected_mod['doors'] != '–ù/–î':
                spec_parts.append(f"({selected_mod['doors']})")
            
            if selected_mod.get('engine') and selected_mod['engine'] != '–ù/–î':
                spec_parts.append(f"–î–≤–≥–∞—Ç–µ—å: {selected_mod['engine']}")
            
            if selected_mod.get('power') and selected_mod['power'] != '–ù/–î':
                spec_parts.append(f"{selected_mod['power']} –ª.—Å.")
            
            if selected_mod.get('year') and selected_mod['year'] != '–ù/–î':
                spec_parts.append(f"{selected_mod['year']} –≥.")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
            spec_text = "üöó " + " ".join(spec_parts) if spec_parts else "üöó –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if current_path:
                path_level = parts_data
                path_names = []
                for index in current_path:
                    path_names.append(path_level[index]['name'])
                    path_level = path_level[index].get('children', [])
                spec_text += f"\nüìç {' ‚Üí '.join(path_names)}"
            
            await message.edit_text(
                spec_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error showing parts level: {e}", exc_info=True)
            await message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—ÄÔøΩÔøΩ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_modifications")
                ]])
            )

    async def handle_spare_part_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø—á–∞—Å—Ç–∏"""
        try:
            part_idx = int(callback.data.split('_')[2])
            data = await state.get_data()
            spare_parts = data.get('current_spare_parts', [])
            
            if 0 <= part_idx < len(spare_parts):
                selected_part = spare_parts[part_idx]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∑–∞–ø—á–∞—Å—Ç–µ–π
                info_text = f"üì¶ {selected_part.get('groupName', '')}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –¥–ª—è —Å–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–æ–≤
                if selected_part.get('schemaUrl'):
                    info_text += f"üñº [–°—Ö–µ–º–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–≤]({selected_part['schemaUrl']})\n\n"
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞ —Å—Ö–µ–º–µ
                positions = {}
                for part in spare_parts:
                    code = part.get('codeOnImage', '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞')
                    if code not in positions:
                        positions[code] = []
                    
                    article_info = {
                        'number': part.get('partNumber', '–ù/–î'),
                        'name': part.get('name', ''),
                        'manufacturer': part.get('manufacturer', '–û—Ä–∏–≥–∏–Ω–∞–ª')
                    }
                    positions[code].append(article_info)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞—Ä—Ç–∏–∫—É–ª–∞—Ö –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
                for code, articles in sorted(positions.items()):
                    if code != '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞':
                        info_text += f"üìç –ü–æ–∑–∏—Ü–∏—è {code}:\n"
                    else:
                        info_text += f"üìç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n"
                    
                    for article in articles:
                        info_text += f"‚Ä¢ {article['name']} - {article['number']}"
                        if article['manufacturer'] != '–û—Ä–∏–≥–∏–Ω–∞–ª':
                            info_text += f" ({article['manufacturer']})"
                        info_text += "\n"
                    info_text += "\n"
                
                keyboard = [
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="parts_back")]
                ]
                
                await callback.message.edit_text(
                    info_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    parse_mode="Markdown"
                )
            else:
                await callback.answer("–ì—Ä—É–ø–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"Error handling spare part selection: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—á–∞—Å—Ç—è—Ö")

    async def get_group_parts(self, brand_code: str, car_id: str, quick_group_id: str, car_ssd: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            parser = AutodocCarParser()
            parts_data = await parser.get_group_parts(
                brand_code=brand_code,
                car_id=car_id,
                quick_group_id=quick_group_id,
                car_ssd=car_ssd
            )
            
            if not parts_data:
                logger.error("[–û–¢–í–ï–¢] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –∑–∞–ø—á–∞—Å—Ç–µ–π")
                return {}
            
            return parts_data
            
        except Exception as e:
            logger.error(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–ø—á–∞—Å—Ç–µ–π: {e}")
            return {}
