import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from config import config
from models import Base, User, Subscription
from handlers import admin, subscription, referral
from utils.logger import logger
from utils.metrics import metrics
from database import engine, async_session_maker, DatabaseMiddleware
from keyboards.main import get_main_keyboard, get_search_keyboard
from parsers.autodoc_factory import AutodocParserFactory
from parsers.search_aggregator import SearchAggregator
from parsers.autodoc_car_parser import AutodocCarParser

class SearchStates(StatesGroup):
    waiting_for_part_number = State()
    waiting_for_region = State()
    viewing_modifications = State()

class CarSearchStates(StatesGroup):
    waiting_for_brand = State()
    waiting_for_model = State()
    waiting_for_year = State()
    selecting_field = State()
    selecting_field_value = State()
    viewing_modifications = State()

class CarSearch(StatesGroup):
    manufacturer = State()
    modifications = State()
    model = State()
    region = State()

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=config.BOT_TOKEN)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.parser_factory = AutodocParserFactory()
        self.search_aggregator = SearchAggregator()
        
    async def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.dp.update.middleware.register(DatabaseMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.dp.include_router(admin.router)
        self.dp.include_router(subscription.router)
        self.dp.include_router(referral.router)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–µ–Ω–¥ÔøΩÔøΩ–µ—Ä–æ–≤
        self.dp.message.register(self.cmd_start, Command("start"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.dp.message.register(self.search_parts, F.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π")
        self.dp.message.register(self.handle_subscription, F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
        self.dp.message.register(self.handle_profile, F.text == "üì± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        self.dp.message.register(self.handle_help, F.text == "‚ùì –ü–æ–º–æ—â—å")
        self.dp.message.register(self.handle_referral, F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ –ø–æ–∏—Å–∫–∞
        self.dp.message.register(self.handle_new_search, F.text == "üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")
        self.dp.message.register(self.handle_search_history, F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")
        self.dp.message.register(self.handle_main_menu, F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
        self.dp.message.register(self.handle_search_stats, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞")
        self.dp.message.register(self.handle_settings, F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self.dp.message.register(self.handle_part_number, SearchStates.waiting_for_part_number)
        self.dp.callback_query.register(self.handle_region_selection, lambda c: c.data.startswith("region_"))
        self.dp.callback_query.register(self.handle_page_selection, lambda c: c.data.startswith("page_"))
        self.dp.callback_query.register(self.handle_modification_selection, lambda c: c.data.startswith("mod_"))
        self.dp.message.register(self.handle_car_search, F.text == "üöó –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ")
        self.dp.callback_query.register(self.handle_wizard_selection, lambda c: c.data.startswith("wizard_"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏/–≥–æ–¥—É
        self.dp.message.register(self.handle_brand_input, CarSearchStates.waiting_for_brand)
        self.dp.message.register(self.handle_model_input, CarSearchStates.waiting_for_model)
        self.dp.message.register(self.handle_year_input, CarSearchStates.waiting_for_year)
        self.dp.callback_query.register(self.handle_field_selection, CarSearchStates.selecting_field)
        self.dp.callback_query.register(self.handle_field_value_selection, CarSearchStates.selecting_field_value)
        self.dp.callback_query.register(self.handle_back_to_fields, lambda c: c.data == "back_to_fields")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
        self.dp.callback_query.register(
            self.handle_modification_selection,
            lambda c: c.data.startswith("select_mod_")
        )
        
        self.dp.callback_query.register(
            self.handle_back_to_modifications,
            lambda c: c.data == "back_to_modifications"
        )

    @staticmethod
    async def cmd_start(message: types.Message, session: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        metrics.user_commands.labels(command="start").inc()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User)
                .options(selectinload(User.subscription))
                .where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    registered_at=datetime.utcnow()
                )
                session.add(user)
                await session.commit()
                
                logger.info(f"New user registered: {user.telegram_id}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            has_active_subscription = (
                user.subscription and 
                user.subscription.valid_until and 
                user.subscription.valid_until > datetime.utcnow()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "üîç –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞:"
            )
            
            await message.answer(
                welcome_text,
                reply_markup=get_main_keyboard(has_subscription=has_active_subscription)
            )
            
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def search_parts(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª, VIN-–Ω–æ–º–µ—Ä –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ú–ê–†–ö–ê –ú–û–î–ï–õ–¨ –ì–û–î\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: honda civic 1996",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], 
                resize_keyboard=True
            )
        )
        await state.set_state(SearchStates.waiting_for_part_number)

    async def handle_part_number(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–∞/VIN –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
        parts = message.text.strip().split()
        
        if len(parts) >= 3 and parts[-1].isdigit():
            # –≠—Ç–æ –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏/ÔøΩÔøΩ–æ–¥—É
            brand = parts[0]
            model = ' '.join(parts[1:-1])
            year = parts[-1]
            
            parser = AutodocCarParser()
            initial_query = f"{brand} {model} {year}"
            
            search_result = await parser.step_by_step_search(initial_query)
            if not search_result:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
                return
                
            keyboard = []
            fields = list(search_result.get('available_fields', {}).items())
            
            for idx, (field_name, _) in enumerate(fields, 1):
                keyboard.append([InlineKeyboardButton(
                    text=field_name,
                    callback_data=f"field_{idx}"
                )])
            
            keyboard.append([InlineKeyboardButton(
                text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                callback_data="show_modifications"
            )])
            
            search_message = await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
                
            await state.update_data(
                search_result=search_result,
                current_ssd=None,
                known_values={'–ú–æ–¥–µ–ª—å': model, '–ì–æ–¥': year},
                message_id=search_message.message_id
            )
            await state.set_state(CarSearchStates.selecting_field)

    @staticmethod
    async def handle_region_selection(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
        region = callback_query.data.replace("region_", "")
        data = await state.get_data()
        part_number = data.get("part_number")
        
        if not part_number:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        await callback_query.answer()
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        modifications = [
            {"id": 1, "name": "Modification 1", "price": 100},
            {"id": 2, "name": "Modification 2", "price": 200},
        ]
        
        if not modifications:
            await callback_query.message.answer(
                "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω."
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            region=region,
            modifications=modifications,
            current_page=1
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        keyboard = create_modifications_keyboard(modifications)
        await callback_query.message.answer(
            f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {part_number}:",
            reply_markup=keyboard
        )
        await state.set_state(SearchStates.viewing_modifications)

    @staticmethod
    async def handle_page_selection(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        page = int(callback_query.data.replace("page_", ""))
        data = await state.get_data()
        
        modifications = data.get("modifications", [])
        keyboard = create_modifications_keyboard(modifications, page)
        
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        await callback_query.answer()

    @staticmethod
    async def handle_modification_selection(callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—ÄÔøΩÔøΩ–±—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            mod_id = callback_query.data.split('_')[2]
            data = await state.get_data()
            modifications = data.get('modifications', [])
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é
            selected_mod = next((mod for mod in modifications if str(mod['id']) == mod_id), None)
            
            if not selected_mod:
                await callback_query.answer("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            parser = AutodocCarParser()
            brand_code = data['search_result'].get('brand_code')
            parts_data = await parser.get_parts_list(
                brand_code, 
                selected_mod['id'],
                selected_mod['car_ssd']
            )
            
            if not parts_data:
                await callback_query.answer("–°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –∑–∞–ø—á–∞—Å—Ç–µ–π
            parts_tree = parser.display_parts_tree(parts_data)
            parts_text = "üöó –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:\n"
            parts_text += f"‚Ä¢ –ö–æ–º–ª–µ–∫—Ç–∞—Ü–∏—è: {selected_mod['grade']}\n"
            parts_text += f"‚Ä¢ –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: {selected_mod['transmission']}\n"
            parts_text += f"‚Ä¢ –î–≤–µ—Ä–∏: {selected_mod['doors']}\n"
            parts_text += f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {selected_mod['country']}\n\n"
            parts_text += "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏:\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            max_length = 4096
            messages = []
            current_message = parts_text
            
            for part in parts_tree:
                if len(current_message) + len(str(part)) + 2 > max_length:
                    messages.append(current_message)
                    current_message = str(part) + "\n"
                else:
                    current_message += str(part) + "\n"
            
            if current_message:
                messages.append(current_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for i, msg_text in enumerate(messages):
                if i == 0:
                    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                    await callback_query.message.edit_text(
                        msg_text,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º", callback_data="back_to_modifications")
                        ]])
                    )
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                    await callback_query.message.answer(msg_text)
            
            await callback_query.answer()
            
        except Exception as e:
            logger.error(f"Error handling modification selection: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def handle_car_search(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ –º–∞—Ä–∫–µ/–º–æ–¥–µ–ª–∏/–≥–æ–¥—É"""
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], 
            resize_keyboard=True
        ))
        await state.set_state(CarSearchStates.waiting_for_brand)

    async def handle_brand_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return
            
        await state.update_data(brand=message.text.upper())
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        await state.set_state(CarSearchStates.waiting_for_model)

    async def handle_model_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return
            
        await state.update_data(model=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:")
        await state.set_state(CarSearchStates.waiting_for_year)

    async def handle_year_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ–¥–∞"""
        if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.handle_main_menu(message, state)
            return
            
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥ÔøΩÔøΩ–¥")
            return
            
        data = await state.get_data()
        brand = data['brand']
        model = data['model']
        year = message.text
        
        parser = AutodocCarParser()
        initial_query = f"{brand} {model} {year}"
        
        search_result = await parser.step_by_step_search(initial_query)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        search_message = await message.answer("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")
        await state.update_data(
            search_result=search_result,
            current_ssd=None,
            known_values={'–ú–æ–¥–µ–ª—å': model, '–ì–æ–¥': year},
            message_id=search_message.message_id
        )
        
        await self.show_available_fields(search_message, state)

    async def show_available_fields(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        data = await state.get_data()
        search_result = data['search_result']
        fields = list(search_result.get('available_fields', {}).items())
        
        if not fields:
            if data.get('current_ssd'):
                await self.show_modifications(message, state)
            else:
                await message.edit_text("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è
        known_values = data.get('known_values', {})
        current_ssd = data.get('current_ssd')
        auto_filled = False
        parser = AutodocCarParser()
        
        for field_name, field_data in fields:
            if field_name in known_values:
                target_value = known_values[field_name]
                for option in field_data['options']:
                    if target_value.upper() in option['value'].upper():
                        current_ssd = option['key']
                        search_result = await parser.step_by_step_search({
                            'brand_code': search_result.get('brand_code'),
                            'ssd': current_ssd
                        })
                        auto_filled = True
                        await state.update_data(
                            search_result=search_result,
                            current_ssd=current_ssd
                        )
                        logger.info(f"Auto filled: {search_result}, current_ssd: {current_ssd}")
                        await self.show_available_fields(message, state)
                        return
                if auto_filled:
                    return
            
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
        keyboard = []
        for idx, (field_name, _) in enumerate(fields, 1):
            keyboard.append([InlineKeyboardButton(
                text=field_name,
                callback_data=f"field_{idx}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            callback_data="show_modifications"
        )])
        
        await message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CarSearchStates.selecting_field)

    async def handle_field_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ callback_data
            if callback.data == "show_modifications":
                await self.show_modifications(callback.message, state)
                await callback.answer()
                return
            elif callback.data == "back_to_fields":
                await self.handle_back_to_fields(callback, state)
                await callback.answer()
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
            parts = callback.data.split('_')
            if len(parts) < 2 or not parts[1].isdigit():
                logger.error(f"Invalid callback data format: {callback.data}")
                await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            field_idx = int(parts[1]) - 1
            data = await state.get_data()
            fields = list(data['search_result'].get('available_fields', {}).items())
            
            if 0 <= field_idx < len(fields):
                field_name, field_data = fields[field_idx]
                keyboard = []
                
                for idx, option in enumerate(field_data['options'], 1):
                    keyboard.append([InlineKeyboardButton(
                        text=option['value'],
                        callback_data=f"value_{idx}_{field_idx}"
                    )])
                    
                keyboard.append([InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_fields"
                )])
                    
                await callback.message.edit_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_name}:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                )
                await state.set_state(CarSearchStates.selecting_field_value)
                await callback.answer()
            else:
                await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–ª—è")
                
        except Exception as e:
            logger.error(f"Error in field selection: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è")

    async def handle_field_value_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
        value_idx, field_idx = map(int, callback.data.split('_')[1:])
        data = await state.get_data()
        fields = list(data['search_result'].get('available_fields', {}).items())
        field_name, field_data = fields[field_idx]
        
        selected_option = field_data['options'][value_idx - 1]
        current_ssd = selected_option['key']
        
        parser = AutodocCarParser()
        search_result = await parser.step_by_step_search({
            'brand_code': data['search_result'].get('brand_code'),
            'ssd': current_ssd
        })
        
        await state.update_data(
            search_result=search_result,
            current_ssd=current_ssd
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è
        known_values = data.get('known_values', {})
        available_fields = search_result.get('available_fields', {})
        
        # –¶–∏–∫–ª –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
        while True:
            auto_filled = False
            current_fields = list(search_result.get('available_fields', {}).items())
            
            for field_name, field_data in current_fields:
                if field_name in known_values:
                    target_value = known_values[field_name]
                    for option in field_data['options']:
                        if target_value.upper() in option['value'].upper():
                            current_ssd = option['key']
                            search_result = await parser.step_by_step_search({
                                'brand_code': search_result.get('brand_code'),
                                'ssd': current_ssd
                            })
                            auto_filled = True
                            await state.update_data(
                                search_result=search_result,
                                current_ssd=current_ssd
                            )
                            break
                    if auto_filled:
                        break
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if not auto_filled:
                break
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        fields = list(search_result.get('available_fields', {}).items())
        if not fields:
            if current_ssd:
                await self.show_modifications(callback.message, state)
            else:
                await callback.message.edit_text("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                await state.clear()
            return
            
        keyboard = []
        for idx, (field_name, _) in enumerate(fields, 1):
            keyboard.append([InlineKeyboardButton(
                text=field_name,
                callback_data=f"field_{idx}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            callback_data="show_modifications"
        )])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CarSearchStates.selecting_field)
        await callback.answer()

    async def search_modifications(self, brand_code: str, current_ssd: str) -> str:
        """–ü–æ–∏—Å–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        logger.info(f"Searching modifications with brand_code={brand_code}, current_ssd={current_ssd}")
        parser = AutodocCarParser()
        
        if current_ssd:
            logger.info("Getting modifications...")
            mod_result = await parser.display_modifications(brand_code, current_ssd)
            logger.info(f"Got modifications result: {mod_result}")
            
            if mod_result:
                car_id, ssd = mod_result
                logger.info(f"Getting parts list for car_id={car_id}, ssd={ssd}")
                parts_data = await parser.get_parts_list(brand_code, car_id, ssd)
                logger.info(f"Got parts data: {parts_data}")
                return parser.display_parts_tree(parts_data)
        return None

    async def show_modifications(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            data = await state.get_data()
            logger.info(f"Show modifications - State data: {data}")
            
            if not data.get('current_ssd'):
                logger.error("No current_ssd in state data")
                await message.edit_text(
                    "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields")
                    ]])
                )
                return
            
            parser = AutodocCarParser()
            brand_code = data['search_result'].get('brand_code')
            current_ssd = data.get('current_ssd')
            
            logger.info(f"Getting modifications for brand_code={brand_code}, ssd={current_ssd}")
            modifications = await parser.get_wizard_modifications(brand_code, current_ssd)
            logger.info(f"Got modifications response: {modifications}")
            
            if not modifications or not modifications.get('specificAttributes'):
                logger.warning("No modifications found in response")
                await message.edit_text(
                    "–ú–æ–¥–∏—Ñ–∏–∫ÔøΩÔøΩ—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields")
                    ]])
                )
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_mods = []
            keyboard = []
            
            for mod in modifications.get('specificAttributes', []):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ mod
                    attributes = {attr['key']: attr['value'] for attr in mod.get('attributes', [])}
                    car_id = mod.get('carId')
                    car_ssd = mod.get('ssd')
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    formatted_mod = {
                        'id': car_id,
                        'car_ssd': car_ssd,
                        'grade': attributes.get('grade', '–ù/–î'),
                        'transmission': attributes.get('transmission', '–ù/–î'),
                        'doors': data['search_result'].get('state', {}).get('items', [])[5].get('value', '–ù/–î'),
                        'country': attributes.get('destinationRegion', '–ù/–î')
                    }
                    
                    formatted_mods.append(formatted_mod)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
                    button_text = f"{formatted_mod['grade']} - {formatted_mod['transmission']}"
                    if formatted_mod['doors'] != '–ù/–î':
                        button_text += f" ({formatted_mod['doors']})"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    keyboard.append([InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"select_mod_{formatted_mod['id']}"
                    )])
                    
                except Exception as e:
                    logger.error(f"Error formatting modification: {e}", exc_info=True)
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields")])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            common_info = parser.format_common_info(modifications.get('commonAttributes', []))
            info_text = "üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            for key, value in common_info.items():
                info_text += f"‚Ä¢ {key}: {value}\n"
            
            info_text += "\nüöó –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:"
            
            logger.info(f"Sending message with {len(formatted_mods)} modifications")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.edit_text(
                info_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(modifications=formatted_mods)
            await state.set_state(CarSearchStates.viewing_modifications)
            
        except Exception as e:
            logger.error(f"Error showing modifications: {e}", exc_info=True)
            await message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_fields")
                ]])
            )

    async def handle_back_to_fields(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–µ–π"""
        data = await state.get_data()
        search_result = data.get('search_result', {})
        fields = list(search_result.get('available_fields', {}).items())
        
        keyboard = []
        for idx, (field_name, _) in enumerate(fields, 1):
            keyboard.append([InlineKeyboardButton(
                text=field_name,
                callback_data=f"field_{idx}"
            )])
        
        keyboard.append([InlineKeyboardButton(
            text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            callback_data="show_modifications"
        )])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(CarSearchStates.selecting_field)
        await callback.answer()

    def format_parts_tree(self, parts_data, level=0):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ —Ç–µ–∫—Å—Ç"""
        result = []
        indent = "  " * level
        
        for item in parts_data:
            result.append(f"{indent}üì¶ {item['name']}")
            if 'children' in item:
                result.extend(self.format_parts_tree(item['children'], level + 1))
                
        return "\n".join(result)

    def split_long_message(self, text, max_length=4096):
        """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
        return [text[i:i+max_length] for i in range(0, len(text), max_length)]

    async def handle_wizard_selection(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –≤ wizard"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤ wizard
        await callback_query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await self.register_handlers()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("bot_starting")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error("bot_startup_error", error=str(e))
            metrics.error_count.labels(type="startup").inc()
            raise

    async def handle_subscription(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")

    async def handle_profile(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        await message.answer(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=get_profile_keyboard()
        )

    async def handle_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
        help_text = (
            "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
            "1. –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π - –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ VIN\n"
            "2. –ü–æ–¥–ø–∏—Å–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö\n"
            "3. –ü—Ä–æ—Ñ–∏–ª—å - –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "4. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin"
        )
        await message.answer(help_text)

    async def handle_referral(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")

    async def handle_new_search(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        await self.search_parts(message, state)

    async def handle_search_history(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"""
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∏—Å–∫–æ–≤")

    async def handle_main_menu(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )

    async def handle_search_stats(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –ø–∏—Å–∫–æ–≤")

    async def handle_settings(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")

    async def handle_back_to_modifications(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        try:
            await self.show_modifications(callback.message, state)
            await callback.answer()
        except Exception as e:
            logger.error(f"Error handling back to modifications: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π")
