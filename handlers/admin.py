from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from datetime import datetime, timedelta

from models import User, Subscription, Payment
from config import ADMIN_IDS

router = Router()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_subscription_days = State()

def admin_filter(message: types.Message):
    return message.from_user.id in ADMIN_IDS

@router.message(Command("admin"), admin_filter)
async def show_admin_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = (
        "üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/admin_add_subscription - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/admin_search_user - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/admin_broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    await message.answer(text)

@router.message(Command("admin_stats"), admin_filter)
async def show_stats(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    total_users = await session.execute(select(func.count()).select_from(User))
    total_users = total_users.scalar()
    
    active_subscriptions = await session.execute(
        select(func.count())
        .select_from(Subscription)
        .where(Subscription.is_active == True)
        .where(Subscription.end_date > datetime.utcnow())
    )
    active_subscriptions = active_subscriptions.scalar()
    
    today_payments = await session.execute(
        select(func.sum(Payment.amount))
        .where(Payment.created_at >= datetime.utcnow().date())
        .where(Payment.status == 'completed')
    )
    today_payments = today_payments.scalar() or 0
    
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
        f"üí∞ –û–ø–ª–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_payments}‚ÇΩ"
    )
    await message.answer(text)

@router.message(Command("admin_add_subscription"), admin_filter)
async def add_subscription_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_id)

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:")
        await state.set_state(AdminStates.waiting_for_subscription_days)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(AdminStates.waiting_for_subscription_days)
async def process_subscription_days(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        days = int(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        
        user = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = user.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return
        
        if not user.subscription:
            subscription = Subscription(user_id=user.id)
            session.add(subscription)
        else:
            subscription = user.subscription
        
        now = datetime.utcnow()
        if subscription.end_date and subscription.end_date > now:
            subscription.end_date += timedelta(days=days)
        else:
            subscription.start_date = now
            subscription.end_date = now + timedelta(days=days)
        
        subscription.is_active = True
        await session.commit()
        
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {days} –¥–Ω–µ–π")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
    finally:
        await state.clear()

@router.message(Command("admin_search_user"), admin_filter)
async def search_user(message: types.Message, session: AsyncSession):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É"""
    search_query = message.text.replace("/admin_search_user", "").strip()
    if not search_query:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_id = int(search_query)
        query = select(User).where(User.telegram_id == user_id)
    except ValueError:
        query = select(User).where(User.username == search_query.lstrip("@"))
    
    user = await session.execute(query)
    user = user.scalar_one_or_none()
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    subscription_status = "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
    if user.subscription and user.subscription.is_active:
        if user.subscription.end_date > datetime.utcnow():
            subscription_status = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.subscription.end_date.strftime('%d.%m.%Y')}"
        else:
            subscription_status = "–ò—Å—Ç–µ–∫–ª–∞"
    
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or '–±–µ–∑ username'}\n"
        f"ID: {user.telegram_id}\n"
        f"–ò–º—è: {user.first_name} {user.last_name or ''}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
    )
    await message.answer(text)
