from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from datetime import datetime, timedelta
from utils.metrics import metrics
from utils.logger import logger
from config import config
from services.subscription_service import SubscriptionService

router = Router()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_subscription_days = State()
    waiting_broadcast_message = State()

@router.message(Command("admin"))
async def show_admin_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    if message.from_user.id not in config.ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
        
    text = (
        "üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/admin_add_subscription - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/admin_search_user - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/admin_broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    await message.answer(text)

@router.message(Command("admin_stats"))
async def admin_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id not in config.ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
        
    metrics.user_commands.labels(command="admin").inc()
    
    stats = await get_admin_stats()
    await message.reply(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}\n"
        f"–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_revenue']}‚ÇΩ\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}"
    )

async def get_admin_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Prometheus
        active_users = metrics.active_users._value.get()
        active_subs = metrics.active_subscriptions._value.get()
        total_revenue = metrics.subscription_revenue._value.get()
        total_requests = sum(
            m.value for m in metrics.user_commands.collect()[0].samples
        )
        
        return {
            "active_users": int(active_users),
            "active_subscriptions": int(active_subs),
            "today_revenue": round(float(total_revenue), 2),
            "total_requests": int(total_requests)
        }
    except Exception as e:
        logger.error("admin_stats_error", error=str(e))
        return {
            "active_users": 0,
            "active_subscriptions": 0,
            "today_revenue": 0,
            "total_requests": 0
        }

@router.message(Command("admin_add_subscription"))
async def add_subscription_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if message.from_user.id not in config.ADMIN_IDS:
        return
        
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_id)

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:")
        await state.set_state(AdminStates.waiting_for_subscription_days)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(AdminStates.waiting_for_subscription_days)
async def process_subscription_days(message: types.Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        days = int(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        
        user = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = user.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return
        
        if not user.subscription:
            subscription = Subscription(user_id=user.id)
            session.add(subscription)
        else:
            subscription = user.subscription
        
        now = datetime.utcnow()
        if subscription.end_date and subscription.end_date > now:
            subscription.end_date += timedelta(days=days)
        else:
            subscription.start_date = now
            subscription.end_date = now + timedelta(days=days)
        
        subscription.is_active = True
        await session.commit()
        
        await message.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {days} –¥–Ω–µ–π")
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
    finally:
        await state.clear()

@router.message(Command("admin_search_user"))
async def search_user(message: types.Message, session: AsyncSession):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É"""
    if message.from_user.id not in config.ADMIN_IDS:
        return
        
    search_query = message.text.replace("/admin_search_user", "").strip()
    if not search_query:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        user_id = int(search_query)
        query = select(User).where(User.telegram_id == user_id)
    except ValueError:
        query = select(User).where(User.username == search_query.lstrip("@"))
    
    user = await session.execute(query)
    user = user.scalar_one_or_none()
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    subscription_status = "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
    if user.subscription and user.subscription.is_active:
        if user.subscription.end_date > datetime.utcnow():
            subscription_status = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.subscription.end_date.strftime('%d.%m.%Y')}"
        else:
            subscription_status = "–ò—Å—Ç–µ–∫–ª–∞"
    
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or '–±–µ–∑ username'}\n"
        f"ID: {user.telegram_id}\n"
        f"–ò–º—è: {user.first_name} {user.last_name or ''}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
    )
    await message.answer(text)

@router.message(Command("admin_broadcast"))
async def broadcast_command(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if message.from_user.id not in config.ADMIN_IDS:
        return
        
    await message.reply(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await state.set_state(AdminStates.waiting_broadcast_message)

@router.message(AdminStates.waiting_broadcast_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.text == "/cancel":
        await state.finish()
        await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
        
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        metrics.user_commands.labels(command="broadcast").inc()
        await message.reply("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞")
    except Exception as e:
        logger.error("broadcast_error", error=str(e))
        metrics.error_count.labels(type="broadcast").inc()
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
