from handlers.base_handler import BaseHandler
from services.search_service import SearchService
from utils.metrics import metrics
from utils.logger import logger
from aiogram import types
from typing import List, Dict, Any

class SearchHandler(BaseHandler):
    def __init__(self, db_session):
        super().__init__(db_session)
        self.search_service = SearchService(db_session)
        self.logger = logger.bind(handler="SearchHandler")
    
    async def handle(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        user_id = message.from_user.id
        query = message.text
        
        metrics.user_commands.labels(command="search").inc()
        
        try:
            with self.measure_time("search_handler"):
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not await self.validate_user(user_id):
                    await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
                    return
                
                # –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π
                results = await self.search_service.search_parts(user_id, query)
                
                if not results:
                    await message.reply("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                response = self._format_results(results)
                await message.reply(response, parse_mode="HTML")
                
        except Exception as e:
            await self.handle_error(e, {"user_id": user_id, "query": query})
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def show_history(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        
        metrics.user_commands.labels(command="search_history").inc()
        
        try:
            with self.measure_time("search_history"):
                history = await self.search_service.get_search_history(user_id)
                
                if not history:
                    await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.")
                    return
                
                response = self._format_history(history)
                await message.reply(response, parse_mode="HTML")
                
        except Exception as e:
            await self.handle_error(e, {"user_id": user_id})
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞.")
    
    def _format_results(self, results: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        formatted = ["<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n"]
        
        for result in results:
            formatted.append(
                f"üîç <b>{result['name']}</b>\n"
                f"–ê—Ä—Ç–∏–∫—É–ª: {result['number']}\n"
                f"–¶–µ–Ω–∞: {result['price']} —Ä—É–±.\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}\n"
                f"<a href='{result['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
            )
        
        return "\n".join(formatted)
    
    def _format_history(self, history: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"""
        formatted = ["<b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>\n"]
        
        for item in history:
            formatted.append(
                f"üïí {item['timestamp']}\n"
                f"–ó–∞–ø—Ä–æ—Å: {item['query']}\n"
                f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {item['results_count']}\n"
            )
        
        return "\n".join(formatted)
