from aiogram import Router, types
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from models import User, Subscription, Payment
from services.robokassa import RobokassaPayment
from keyboards.subscription import get_subscription_keyboard

router = Router()
robokassa = RobokassaPayment()

SUBSCRIPTION_PRICES = {
    "month": 299.0,
    "year": 2990.0
}

@router.message(lambda m: m.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def show_subscription_info(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    result = await session.execute(
        select(User)
        .options(selectinload(User.subscription))
        .where(User.telegram_id == message.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        session.add(user)
        await session.commit()
        await session.refresh(user)
    
    if not user.subscription:
        keyboard = get_subscription_keyboard()
        return await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=keyboard
        )
    
    if user.subscription.is_active:
        expires_at = user.subscription.start_date + timedelta(days=30 if user.subscription.period == 'month' else 365)
        days_left = (expires_at - datetime.utcnow()).days
        
        return await message.answer(
            f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
            reply_markup=get_subscription_keyboard()
        )
    else:
        keyboard = get_subscription_keyboard()
        return await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data.startswith('subscribe_'))
async def process_subscription_payment(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    period = callback.data.split('_')[1]
    
    if period not in SUBSCRIPTION_PRICES:
        return await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(User)
        .options(selectinload(User.subscription))
        .where(User.telegram_id == callback.from_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        user = User(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        session.add(user)
        await session.commit()
        await session.refresh(user)
    
    amount = SUBSCRIPTION_PRICES[period]
    description = period
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = Payment(
        amount=amount,
        status='pending',
        subscription_id=user.subscription.id if user.subscription else None
    )
    session.add(payment)
    await session.commit()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    payment_link = robokassa.generate_payment_link(
        amount=amount,
        description=description,
        user_id=user.id
    )
    
    await callback.message.answer(
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_link}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
    )
    await callback.answer()

async def handle_payment_notification(data: dict, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç Robokassa"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        amount = float(data.get('OutSum', 0))
        invoice_id = data.get('InvId', '')
        signature = data.get('SignatureValue', '')
        
        if not robokassa.verify_payment(amount, invoice_id, signature):
            return {'error': 'Invalid signature'}
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ invoice_id
        user_id = int(invoice_id.split('_')[0])
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User)
            .options(selectinload(User.subscription))
            .where(User.id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            return {'error': 'User not found'}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—É–º–º–µ
        period = 'month' if amount == SUBSCRIPTION_PRICES['month'] else 'year'
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not user.subscription:
            subscription = Subscription(
                user_id=user.id,
                is_active=True,
                start_date=datetime.utcnow(),
                period=period
            )
            session.add(subscription)
        else:
            user.subscription.is_active = True
            user.subscription.start_date = datetime.utcnow()
            user.subscription.period = period
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment = Payment(
            subscription_id=user.subscription.id,
            amount=amount,
            transaction_id=invoice_id,
            status='completed'
        )
        session.add(payment)
        
        await session.commit()
        return {'status': 'success'}
        
    except Exception as e:
        return {'error': str(e)}
